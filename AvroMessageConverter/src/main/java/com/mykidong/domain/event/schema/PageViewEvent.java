/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mykidong.domain.event.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PageViewEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5378091391342798089L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PageViewEvent\",\"namespace\":\"com.mykidong.domain.event.schema\",\"fields\":[{\"name\":\"baseProperties\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BaseProperties\",\"fields\":[{\"name\":\"pcid\",\"type\":[\"null\",\"string\"]},{\"name\":\"sessionId\",\"type\":[\"null\",\"string\"]},{\"name\":\"referer\",\"type\":[\"null\",\"string\"]},{\"name\":\"browser\",\"type\":[\"null\",\"string\"]},{\"name\":\"eventType\",\"type\":[\"null\",\"string\"]},{\"name\":\"version\",\"type\":[\"null\",\"string\"]},{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"]}]}]},{\"name\":\"itemId\",\"type\":[\"null\",\"string\"]},{\"name\":\"itemTitle\",\"type\":[\"null\",\"string\"]},{\"name\":\"scrollRange\",\"type\":[\"null\",\"int\"]},{\"name\":\"stayTerm\",\"type\":[\"null\",\"long\"]},{\"name\":\"scrollUpDownCount\",\"type\":[\"null\",\"int\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PageViewEvent> ENCODER =
      new BinaryMessageEncoder<PageViewEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PageViewEvent> DECODER =
      new BinaryMessageDecoder<PageViewEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PageViewEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PageViewEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PageViewEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PageViewEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PageViewEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PageViewEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PageViewEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PageViewEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.mykidong.domain.event.schema.BaseProperties baseProperties;
  private java.lang.CharSequence itemId;
  private java.lang.CharSequence itemTitle;
  private java.lang.Integer scrollRange;
  private java.lang.Long stayTerm;
  private java.lang.Integer scrollUpDownCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PageViewEvent() {}

  /**
   * All-args constructor.
   * @param baseProperties The new value for baseProperties
   * @param itemId The new value for itemId
   * @param itemTitle The new value for itemTitle
   * @param scrollRange The new value for scrollRange
   * @param stayTerm The new value for stayTerm
   * @param scrollUpDownCount The new value for scrollUpDownCount
   */
  public PageViewEvent(com.mykidong.domain.event.schema.BaseProperties baseProperties, java.lang.CharSequence itemId, java.lang.CharSequence itemTitle, java.lang.Integer scrollRange, java.lang.Long stayTerm, java.lang.Integer scrollUpDownCount) {
    this.baseProperties = baseProperties;
    this.itemId = itemId;
    this.itemTitle = itemTitle;
    this.scrollRange = scrollRange;
    this.stayTerm = stayTerm;
    this.scrollUpDownCount = scrollUpDownCount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return baseProperties;
    case 1: return itemId;
    case 2: return itemTitle;
    case 3: return scrollRange;
    case 4: return stayTerm;
    case 5: return scrollUpDownCount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: baseProperties = (com.mykidong.domain.event.schema.BaseProperties)value$; break;
    case 1: itemId = (java.lang.CharSequence)value$; break;
    case 2: itemTitle = (java.lang.CharSequence)value$; break;
    case 3: scrollRange = (java.lang.Integer)value$; break;
    case 4: stayTerm = (java.lang.Long)value$; break;
    case 5: scrollUpDownCount = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'baseProperties' field.
   * @return The value of the 'baseProperties' field.
   */
  public com.mykidong.domain.event.schema.BaseProperties getBaseProperties() {
    return baseProperties;
  }


  /**
   * Sets the value of the 'baseProperties' field.
   * @param value the value to set.
   */
  public void setBaseProperties(com.mykidong.domain.event.schema.BaseProperties value) {
    this.baseProperties = value;
  }

  /**
   * Gets the value of the 'itemId' field.
   * @return The value of the 'itemId' field.
   */
  public java.lang.CharSequence getItemId() {
    return itemId;
  }


  /**
   * Sets the value of the 'itemId' field.
   * @param value the value to set.
   */
  public void setItemId(java.lang.CharSequence value) {
    this.itemId = value;
  }

  /**
   * Gets the value of the 'itemTitle' field.
   * @return The value of the 'itemTitle' field.
   */
  public java.lang.CharSequence getItemTitle() {
    return itemTitle;
  }


  /**
   * Sets the value of the 'itemTitle' field.
   * @param value the value to set.
   */
  public void setItemTitle(java.lang.CharSequence value) {
    this.itemTitle = value;
  }

  /**
   * Gets the value of the 'scrollRange' field.
   * @return The value of the 'scrollRange' field.
   */
  public java.lang.Integer getScrollRange() {
    return scrollRange;
  }


  /**
   * Sets the value of the 'scrollRange' field.
   * @param value the value to set.
   */
  public void setScrollRange(java.lang.Integer value) {
    this.scrollRange = value;
  }

  /**
   * Gets the value of the 'stayTerm' field.
   * @return The value of the 'stayTerm' field.
   */
  public java.lang.Long getStayTerm() {
    return stayTerm;
  }


  /**
   * Sets the value of the 'stayTerm' field.
   * @param value the value to set.
   */
  public void setStayTerm(java.lang.Long value) {
    this.stayTerm = value;
  }

  /**
   * Gets the value of the 'scrollUpDownCount' field.
   * @return The value of the 'scrollUpDownCount' field.
   */
  public java.lang.Integer getScrollUpDownCount() {
    return scrollUpDownCount;
  }


  /**
   * Sets the value of the 'scrollUpDownCount' field.
   * @param value the value to set.
   */
  public void setScrollUpDownCount(java.lang.Integer value) {
    this.scrollUpDownCount = value;
  }

  /**
   * Creates a new PageViewEvent RecordBuilder.
   * @return A new PageViewEvent RecordBuilder
   */
  public static com.mykidong.domain.event.schema.PageViewEvent.Builder newBuilder() {
    return new com.mykidong.domain.event.schema.PageViewEvent.Builder();
  }

  /**
   * Creates a new PageViewEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PageViewEvent RecordBuilder
   */
  public static com.mykidong.domain.event.schema.PageViewEvent.Builder newBuilder(com.mykidong.domain.event.schema.PageViewEvent.Builder other) {
    if (other == null) {
      return new com.mykidong.domain.event.schema.PageViewEvent.Builder();
    } else {
      return new com.mykidong.domain.event.schema.PageViewEvent.Builder(other);
    }
  }

  /**
   * Creates a new PageViewEvent RecordBuilder by copying an existing PageViewEvent instance.
   * @param other The existing instance to copy.
   * @return A new PageViewEvent RecordBuilder
   */
  public static com.mykidong.domain.event.schema.PageViewEvent.Builder newBuilder(com.mykidong.domain.event.schema.PageViewEvent other) {
    if (other == null) {
      return new com.mykidong.domain.event.schema.PageViewEvent.Builder();
    } else {
      return new com.mykidong.domain.event.schema.PageViewEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for PageViewEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PageViewEvent>
    implements org.apache.avro.data.RecordBuilder<PageViewEvent> {

    private com.mykidong.domain.event.schema.BaseProperties baseProperties;
    private com.mykidong.domain.event.schema.BaseProperties.Builder basePropertiesBuilder;
    private java.lang.CharSequence itemId;
    private java.lang.CharSequence itemTitle;
    private java.lang.Integer scrollRange;
    private java.lang.Long stayTerm;
    private java.lang.Integer scrollUpDownCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mykidong.domain.event.schema.PageViewEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.baseProperties)) {
        this.baseProperties = data().deepCopy(fields()[0].schema(), other.baseProperties);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasBasePropertiesBuilder()) {
        this.basePropertiesBuilder = com.mykidong.domain.event.schema.BaseProperties.newBuilder(other.getBasePropertiesBuilder());
      }
      if (isValidValue(fields()[1], other.itemId)) {
        this.itemId = data().deepCopy(fields()[1].schema(), other.itemId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.itemTitle)) {
        this.itemTitle = data().deepCopy(fields()[2].schema(), other.itemTitle);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.scrollRange)) {
        this.scrollRange = data().deepCopy(fields()[3].schema(), other.scrollRange);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.stayTerm)) {
        this.stayTerm = data().deepCopy(fields()[4].schema(), other.stayTerm);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.scrollUpDownCount)) {
        this.scrollUpDownCount = data().deepCopy(fields()[5].schema(), other.scrollUpDownCount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PageViewEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mykidong.domain.event.schema.PageViewEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.baseProperties)) {
        this.baseProperties = data().deepCopy(fields()[0].schema(), other.baseProperties);
        fieldSetFlags()[0] = true;
      }
      this.basePropertiesBuilder = null;
      if (isValidValue(fields()[1], other.itemId)) {
        this.itemId = data().deepCopy(fields()[1].schema(), other.itemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemTitle)) {
        this.itemTitle = data().deepCopy(fields()[2].schema(), other.itemTitle);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.scrollRange)) {
        this.scrollRange = data().deepCopy(fields()[3].schema(), other.scrollRange);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stayTerm)) {
        this.stayTerm = data().deepCopy(fields()[4].schema(), other.stayTerm);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.scrollUpDownCount)) {
        this.scrollUpDownCount = data().deepCopy(fields()[5].schema(), other.scrollUpDownCount);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'baseProperties' field.
      * @return The value.
      */
    public com.mykidong.domain.event.schema.BaseProperties getBaseProperties() {
      return baseProperties;
    }


    /**
      * Sets the value of the 'baseProperties' field.
      * @param value The value of 'baseProperties'.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder setBaseProperties(com.mykidong.domain.event.schema.BaseProperties value) {
      validate(fields()[0], value);
      this.basePropertiesBuilder = null;
      this.baseProperties = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'baseProperties' field has been set.
      * @return True if the 'baseProperties' field has been set, false otherwise.
      */
    public boolean hasBaseProperties() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'baseProperties' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.mykidong.domain.event.schema.BaseProperties.Builder getBasePropertiesBuilder() {
      if (basePropertiesBuilder == null) {
        if (hasBaseProperties()) {
          setBasePropertiesBuilder(com.mykidong.domain.event.schema.BaseProperties.newBuilder(baseProperties));
        } else {
          setBasePropertiesBuilder(com.mykidong.domain.event.schema.BaseProperties.newBuilder());
        }
      }
      return basePropertiesBuilder;
    }

    /**
     * Sets the Builder instance for the 'baseProperties' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.mykidong.domain.event.schema.PageViewEvent.Builder setBasePropertiesBuilder(com.mykidong.domain.event.schema.BaseProperties.Builder value) {
      clearBaseProperties();
      basePropertiesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'baseProperties' field has an active Builder instance
     * @return True if the 'baseProperties' field has an active Builder instance
     */
    public boolean hasBasePropertiesBuilder() {
      return basePropertiesBuilder != null;
    }

    /**
      * Clears the value of the 'baseProperties' field.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder clearBaseProperties() {
      baseProperties = null;
      basePropertiesBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemId' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemId() {
      return itemId;
    }


    /**
      * Sets the value of the 'itemId' field.
      * @param value The value of 'itemId'.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder setItemId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.itemId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'itemId' field has been set.
      * @return True if the 'itemId' field has been set, false otherwise.
      */
    public boolean hasItemId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'itemId' field.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder clearItemId() {
      itemId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemTitle' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemTitle() {
      return itemTitle;
    }


    /**
      * Sets the value of the 'itemTitle' field.
      * @param value The value of 'itemTitle'.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder setItemTitle(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.itemTitle = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'itemTitle' field has been set.
      * @return True if the 'itemTitle' field has been set, false otherwise.
      */
    public boolean hasItemTitle() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'itemTitle' field.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder clearItemTitle() {
      itemTitle = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'scrollRange' field.
      * @return The value.
      */
    public java.lang.Integer getScrollRange() {
      return scrollRange;
    }


    /**
      * Sets the value of the 'scrollRange' field.
      * @param value The value of 'scrollRange'.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder setScrollRange(java.lang.Integer value) {
      validate(fields()[3], value);
      this.scrollRange = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'scrollRange' field has been set.
      * @return True if the 'scrollRange' field has been set, false otherwise.
      */
    public boolean hasScrollRange() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'scrollRange' field.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder clearScrollRange() {
      scrollRange = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'stayTerm' field.
      * @return The value.
      */
    public java.lang.Long getStayTerm() {
      return stayTerm;
    }


    /**
      * Sets the value of the 'stayTerm' field.
      * @param value The value of 'stayTerm'.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder setStayTerm(java.lang.Long value) {
      validate(fields()[4], value);
      this.stayTerm = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'stayTerm' field has been set.
      * @return True if the 'stayTerm' field has been set, false otherwise.
      */
    public boolean hasStayTerm() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'stayTerm' field.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder clearStayTerm() {
      stayTerm = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'scrollUpDownCount' field.
      * @return The value.
      */
    public java.lang.Integer getScrollUpDownCount() {
      return scrollUpDownCount;
    }


    /**
      * Sets the value of the 'scrollUpDownCount' field.
      * @param value The value of 'scrollUpDownCount'.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder setScrollUpDownCount(java.lang.Integer value) {
      validate(fields()[5], value);
      this.scrollUpDownCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'scrollUpDownCount' field has been set.
      * @return True if the 'scrollUpDownCount' field has been set, false otherwise.
      */
    public boolean hasScrollUpDownCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'scrollUpDownCount' field.
      * @return This builder.
      */
    public com.mykidong.domain.event.schema.PageViewEvent.Builder clearScrollUpDownCount() {
      scrollUpDownCount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PageViewEvent build() {
      try {
        PageViewEvent record = new PageViewEvent();
        if (basePropertiesBuilder != null) {
          try {
            record.baseProperties = this.basePropertiesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("baseProperties"));
            throw e;
          }
        } else {
          record.baseProperties = fieldSetFlags()[0] ? this.baseProperties : (com.mykidong.domain.event.schema.BaseProperties) defaultValue(fields()[0]);
        }
        record.itemId = fieldSetFlags()[1] ? this.itemId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.itemTitle = fieldSetFlags()[2] ? this.itemTitle : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.scrollRange = fieldSetFlags()[3] ? this.scrollRange : (java.lang.Integer) defaultValue(fields()[3]);
        record.stayTerm = fieldSetFlags()[4] ? this.stayTerm : (java.lang.Long) defaultValue(fields()[4]);
        record.scrollUpDownCount = fieldSetFlags()[5] ? this.scrollUpDownCount : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PageViewEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<PageViewEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PageViewEvent>
    READER$ = (org.apache.avro.io.DatumReader<PageViewEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.baseProperties == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.baseProperties.customEncode(out);
    }

    if (this.itemId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.itemId);
    }

    if (this.itemTitle == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.itemTitle);
    }

    if (this.scrollRange == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.scrollRange);
    }

    if (this.stayTerm == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.stayTerm);
    }

    if (this.scrollUpDownCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.scrollUpDownCount);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.baseProperties = null;
      } else {
        if (this.baseProperties == null) {
          this.baseProperties = new com.mykidong.domain.event.schema.BaseProperties();
        }
        this.baseProperties.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.itemId = null;
      } else {
        this.itemId = in.readString(this.itemId instanceof Utf8 ? (Utf8)this.itemId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.itemTitle = null;
      } else {
        this.itemTitle = in.readString(this.itemTitle instanceof Utf8 ? (Utf8)this.itemTitle : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.scrollRange = null;
      } else {
        this.scrollRange = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.stayTerm = null;
      } else {
        this.stayTerm = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.scrollUpDownCount = null;
      } else {
        this.scrollUpDownCount = in.readInt();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.baseProperties = null;
          } else {
            if (this.baseProperties == null) {
              this.baseProperties = new com.mykidong.domain.event.schema.BaseProperties();
            }
            this.baseProperties.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.itemId = null;
          } else {
            this.itemId = in.readString(this.itemId instanceof Utf8 ? (Utf8)this.itemId : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.itemTitle = null;
          } else {
            this.itemTitle = in.readString(this.itemTitle instanceof Utf8 ? (Utf8)this.itemTitle : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.scrollRange = null;
          } else {
            this.scrollRange = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.stayTerm = null;
          } else {
            this.stayTerm = in.readLong();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.scrollUpDownCount = null;
          } else {
            this.scrollUpDownCount = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










